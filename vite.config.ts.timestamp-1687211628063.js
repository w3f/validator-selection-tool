// vite.config.ts
import { resolve } from "path"
import { defineConfig } from "vite"
import modulepreload from "rollup-plugin-modulepreload"
import reactPlugin from "@vitejs/plugin-react"
import typescript from "rollup-plugin-typescript2"
import Unfonts from "unplugin-fonts/vite"
var fonts = Unfonts({
  google: {
    preconnect: false,
    display: "block",
    injectTo: "head-prepend",
    families: ["Lato", "Montserrat"],
  },
})
var typescriptPlugin = () => ({
  ...typescript(),
  enforce: "pre",
})
var customPreloadPlugin = () => {
  const result = {
    ...modulepreload({
      index: resolve(
        "/home/josep/Projects/validator-selection-tool",
        "dist",
        "index.html",
      ),
      prefix: process.env.BASE_URL || ".",
    }),
    enforce: "post",
  }
  result.writeBundle = result.generateBundle
  delete result.generateBundle
  return result
}
var vite_config_default = defineConfig(({ mode }) => {
  const isDev = mode === "development"
  const plugins = [reactPlugin()]
  if (isDev) plugins.unshift(typescriptPlugin())
  else plugins.unshift(customPreloadPlugin(), fonts)
  return {
    build: {
      target: ["es2020"],
      sourcemap: true,
    },
    resolve: {
      alias: {
        "@": resolve("/home/josep/Projects/validator-selection-tool", "src"),
      },
    },
    plugins,
    optimizeDeps: {
      include: ["react/jsx-runtime"],
    },
  }
})
export { vite_config_default as default }
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IHJlc29sdmUgfSBmcm9tIFwicGF0aFwiXG5pbXBvcnQgeyBkZWZpbmVDb25maWcsIFBsdWdpbk9wdGlvbiB9IGZyb20gXCJ2aXRlXCJcbmltcG9ydCBtb2R1bGVwcmVsb2FkIGZyb20gXCJyb2xsdXAtcGx1Z2luLW1vZHVsZXByZWxvYWRcIlxuaW1wb3J0IHJlYWN0UGx1Z2luIGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiXG5pbXBvcnQgdHlwZXNjcmlwdCBmcm9tIFwicm9sbHVwLXBsdWdpbi10eXBlc2NyaXB0MlwiXG5pbXBvcnQgVW5mb250cyBmcm9tIFwidW5wbHVnaW4tZm9udHMvdml0ZVwiXG5cbmNvbnN0IGZvbnRzID0gVW5mb250cyh7XG4gIC8vIEdvb2dsZSBGb250cyBBUEkgVjJcbiAgZ29vZ2xlOiB7XG4gICAgLyoqXG4gICAgICogZW5hYmxlIHByZWNvbm5lY3QgbGluayBpbmplY3Rpb25cbiAgICAgKiAgIDxsaW5rIHJlbD1cInByZWNvbm5lY3RcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbS9cIiBjcm9zc29yaWdpbj5cbiAgICAgKiBkZWZhdWx0OiB0cnVlXG4gICAgICovXG4gICAgcHJlY29ubmVjdDogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiB2YWx1ZXM6IGF1dG8sIGJsb2NrLCBzd2FwKGRlZmF1bHQpLCBmYWxsYmFjaywgb3B0aW9uYWxcbiAgICAgKiBkZWZhdWx0OiAnc3dhcCdcbiAgICAgKi9cbiAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG5cbiAgICAvKipcbiAgICAgKiBkZWZpbmUgd2hpY2ggY2hhcmFjdGVycyB0byBsb2FkXG4gICAgICogZGVmYXVsdDogdW5kZWZpbmVkIChsb2FkIGFsbCBjaGFyYWN0ZXJzKVxuICAgIHRleHQ6ICdWaXRlQXdzb20nLFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogZGVmaW5lIHdoZXJlIHRoZSBmb250IGxvYWQgdGFncyBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiBkZWZhdWx0OiAnaGVhZC1wcmVwZW5kJ1xuICAgICAqICAgdmFsdWVzOiAnaGVhZCcgfCAnYm9keScgfCAnaGVhZC1wcmVwZW5kJyB8ICdib2R5LXByZXBlbmQnXG4gICAgICovXG4gICAgaW5qZWN0VG86IFwiaGVhZC1wcmVwZW5kXCIsXG5cbiAgICAvKipcbiAgICAgKiBGb250cyBmYW1pbGllcyBsaXN0c1xuICAgICAqL1xuICAgIGZhbWlsaWVzOiBbXG4gICAgICAvLyBmYW1pbGllcyBjYW4gYmUgZWl0aGVyIHN0cmluZ3MgKG9ubHkgcmVndWxhciA0MDAgd2lsbCBiZSBsb2FkZWQpXG4gICAgICBcIkxhdG9cIixcbiAgICAgIFwiTW9udHNlcnJhdFwiLFxuICAgIF0sXG4gIH0sXG59KVxuXG5jb25zdCB0eXBlc2NyaXB0UGx1Z2luOiBhbnkgPSAoKSA9PiAoe1xuICAuLi50eXBlc2NyaXB0KCksXG4gIGVuZm9yY2U6IFwicHJlXCIsXG59KVxuXG5jb25zdCBjdXN0b21QcmVsb2FkUGx1Z2luID0gKCkgPT4ge1xuICBjb25zdCByZXN1bHQ6IGFueSA9IHtcbiAgICAuLi4oKG1vZHVsZXByZWxvYWQgYXMgYW55KSh7XG4gICAgICBpbmRleDogcmVzb2x2ZShcIi9ob21lL2pvc2VwL1Byb2plY3RzL3ZhbGlkYXRvci1zZWxlY3Rpb24tdG9vbFwiLCBcImRpc3RcIiwgXCJpbmRleC5odG1sXCIpLFxuICAgICAgcHJlZml4OiBwcm9jZXNzLmVudi5CQVNFX1VSTCB8fCBcIi5cIixcbiAgICB9KSBhcyBhbnkpLFxuICAgIGVuZm9yY2U6IFwicG9zdFwiLFxuICB9XG4gIHJlc3VsdC53cml0ZUJ1bmRsZSA9IHJlc3VsdC5nZW5lcmF0ZUJ1bmRsZVxuICBkZWxldGUgcmVzdWx0LmdlbmVyYXRlQnVuZGxlXG4gIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKCh7IG1vZGUgfSkgPT4ge1xuICBjb25zdCBpc0RldiA9IG1vZGUgPT09IFwiZGV2ZWxvcG1lbnRcIlxuXG4gIGNvbnN0IHBsdWdpbnM6IEFycmF5PFBsdWdpbk9wdGlvbj4gPSBbcmVhY3RQbHVnaW4oKV1cbiAgaWYgKGlzRGV2KSBwbHVnaW5zLnVuc2hpZnQodHlwZXNjcmlwdFBsdWdpbigpKVxuICBlbHNlIHBsdWdpbnMudW5zaGlmdChjdXN0b21QcmVsb2FkUGx1Z2luKCksIGZvbnRzKVxuXG4gIHJldHVybiB7XG4gICAgYnVpbGQ6IHtcbiAgICAgIHRhcmdldDogW1wiZXMyMDIwXCJdLFxuICAgICAgc291cmNlbWFwOiB0cnVlLFxuICAgIH0sXG4gICAgcmVzb2x2ZToge1xuICAgICAgYWxpYXM6IHtcbiAgICAgICAgXCJAXCI6IHJlc29sdmUoXCIvaG9tZS9qb3NlcC9Qcm9qZWN0cy92YWxpZGF0b3Itc2VsZWN0aW9uLXRvb2xcIiwgXCJzcmNcIiksXG4gICAgICB9LFxuICAgIH0sXG4gICAgcGx1Z2lucyxcbiAgICBvcHRpbWl6ZURlcHM6IHtcbiAgICAgIGluY2x1ZGU6IFtcInJlYWN0L2pzeC1ydW50aW1lXCJdLFxuICAgIH0sXG4gIH1cbn0pXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsU0FBUyxlQUFlO0FBQ3hCLFNBQVMsb0JBQWtDO0FBQzNDLE9BQU8sbUJBQW1CO0FBQzFCLE9BQU8saUJBQWlCO0FBQ3hCLE9BQU8sZ0JBQWdCO0FBQ3ZCLE9BQU8sYUFBYTtBQUVwQixJQUFNLFFBQVEsUUFBUTtBQUFBLEVBRXBCLFFBQVE7QUFBQSxJQU1OLFlBQVk7QUFBQSxJQU1aLFNBQVM7QUFBQSxJQWFULFVBQVU7QUFBQSxJQUtWLFVBQVU7QUFBQSxNQUVSO0FBQUEsTUFDQTtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQ0YsQ0FBQztBQUVELElBQU0sbUJBQXdCLE9BQU87QUFBQSxFQUNuQyxHQUFHLFdBQVc7QUFBQSxFQUNkLFNBQVM7QUFDWDtBQUVBLElBQU0sc0JBQXNCLE1BQU07QUFDaEMsUUFBTSxTQUFjO0FBQUEsSUFDbEIsR0FBSyxjQUFzQjtBQUFBLE1BQ3pCLE9BQU8sUUFBUSxpREFBaUQsUUFBUSxZQUFZO0FBQUEsTUFDcEYsUUFBUSxRQUFRLElBQUksWUFBWTtBQUFBLElBQ2xDLENBQUM7QUFBQSxJQUNELFNBQVM7QUFBQSxFQUNYO0FBQ0EsU0FBTyxjQUFjLE9BQU87QUFDNUIsU0FBTyxPQUFPO0FBQ2QsU0FBTztBQUNUO0FBRUEsSUFBTyxzQkFBUSxhQUFhLENBQUMsRUFBRSxLQUFLLE1BQU07QUFDeEMsUUFBTSxRQUFRLFNBQVM7QUFFdkIsUUFBTSxVQUErQixDQUFDLFlBQVksQ0FBQztBQUNuRCxNQUFJO0FBQU8sWUFBUSxRQUFRLGlCQUFpQixDQUFDO0FBQUE7QUFDeEMsWUFBUSxRQUFRLG9CQUFvQixHQUFHLEtBQUs7QUFFakQsU0FBTztBQUFBLElBQ0wsT0FBTztBQUFBLE1BQ0wsUUFBUSxDQUFDLFFBQVE7QUFBQSxNQUNqQixXQUFXO0FBQUEsSUFDYjtBQUFBLElBQ0EsU0FBUztBQUFBLE1BQ1AsT0FBTztBQUFBLFFBQ0wsS0FBSyxRQUFRLGlEQUFpRCxLQUFLO0FBQUEsTUFDckU7QUFBQSxJQUNGO0FBQUEsSUFDQTtBQUFBLElBQ0EsY0FBYztBQUFBLE1BQ1osU0FBUyxDQUFDLG1CQUFtQjtBQUFBLElBQy9CO0FBQUEsRUFDRjtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
